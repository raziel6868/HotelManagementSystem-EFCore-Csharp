using BusinessObjects;
using Repositories;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace WpfApp
{
    
    public partial class Admin : Window
    {
        private readonly IRoomInformationRepository _roomInformationRepository = new RoomInfomationRepository();
        private readonly ICustomerRepository _customerRepository = new CustomerRepository();
        private readonly IRoomTypeRepository _roomTypeRepository = new RoomTypeRepository();
        private readonly IBookingDetailRepository _bookingDetailRepository = new BookingDetailRepository();
        private readonly IBookingReservationRepository _bookingReservationRepository = new BookingReservationRepository();

        public Admin()
        {
            InitializeComponent();
            BindRooms();
            BindCustomers();
            BindRoomTypes();
            BindBookingDetails();
        }

        private void BindRooms()
        {
            List<RoomInformation> roomInformations = _roomInformationRepository.GetRoomInformations();
            foreach (RoomInformation roomInformation in roomInformations)
            {
                roomInformation.RoomType = _roomTypeRepository.GetRoomTypeById(roomInformation.RoomTypeID);
            }
            dtRoom.ItemsSource = roomInformations;
        }

        private void BindCustomers()
        {
            List<Customer> customers = _customerRepository.GetCustomers();
            dtCustomers.ItemsSource = customers;
        }

        private void BindRoomTypes()
        {
            List<RoomType> roomTypes = _roomTypeRepository.GetRoomTypes();
            dtRoomType.ItemsSource = roomTypes;
        }

        private void BindBookingDetails ()
        {
            List<BookingDetail> bookingDetails = _bookingDetailRepository.GetAllBookingDetails();
            dtBookingDetails.ItemsSource = bookingDetails;
        }

        private void dtRoom_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGridTemplateColumn actionsColumn = new DataGridTemplateColumn();
            actionsColumn.Header = "Actions";
            actionsColumn.Width = new DataGridLength(1, DataGridLengthUnitType.Auto);

            FrameworkElementFactory factory = new FrameworkElementFactory(typeof(StackPanel));
            factory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
            factory.SetValue(StackPanel.MarginProperty, new Thickness(5, 0, 5, 0)); // Adjust margins for spacing

            FrameworkElementFactory btnUpdate = new FrameworkElementFactory(typeof(Button));
            btnUpdate.SetValue(Button.ContentProperty, "Update");
            btnUpdate.SetValue(Button.CommandParameterProperty, new Binding("RoomID"));
            btnUpdate.AddHandler(Button.ClickEvent, new RoutedEventHandler(Update_Click));
            factory.AppendChild(btnUpdate);

            FrameworkElementFactory btnDelete = new FrameworkElementFactory(typeof(Button));
            btnDelete.SetValue(Button.ContentProperty, "Delete");
            btnDelete.SetValue(Button.CommandParameterProperty, new Binding("RoomID"));
            btnDelete.AddHandler(Button.ClickEvent, new RoutedEventHandler(Delete_Click));
            factory.AppendChild(btnDelete);

            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = factory;
            actionsColumn.CellTemplate = cellTemplate;

            dtRoom.Columns.Add(actionsColumn);
            dtRoom.Items.Refresh();

        }


        private void Update_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int roomID = (int)button?.CommandParameter;

            UpdateRoomWindow updateWindow = new UpdateRoomWindow(roomID);
            updateWindow.Owner = Window.GetWindow(this);
            updateWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;

            updateWindow.Closed += (s, args) =>
            {
                BindRooms();
                dtRoom.Items.Refresh();

            };

            updateWindow.ShowDialog();
        }




        private void Delete_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int roomID = (int)button?.CommandParameter;

            MessageBoxResult result = MessageBox.Show($"Do you want to delete Room ID: {roomID}?",
                                                      "Confirm Deleting",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                _roomInformationRepository.DeleteRoomInformation(_roomInformationRepository.GetRoomInformationById(roomID));


                MessageBox.Show("Delete complete");
                BindRooms();
                dtRoom.Items.Refresh();



            }
        }

        private void Add_Room_Click(object sender, RoutedEventArgs e)
        {
            AddRoomWindow addRoomWindow = new AddRoomWindow();
            addRoomWindow.Owner = Window.GetWindow(this); // Set the owner window
            addRoomWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner; // Center the window
            
            addRoomWindow.Closed += (s, args) =>
            {
                BindRooms();
                dtRoom.Items.Refresh();

            };
            addRoomWindow.ShowDialog();
        }

        private void dtCustomer_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGridTemplateColumn actionsColumn = new DataGridTemplateColumn();
            actionsColumn.Header = "Actions";
            actionsColumn.Width = new DataGridLength(1, DataGridLengthUnitType.Auto);

            FrameworkElementFactory factory = new FrameworkElementFactory(typeof(StackPanel));
            factory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);
            factory.SetValue(StackPanel.MarginProperty, new Thickness(5, 0, 5, 0)); // Adjust margins for spacing

            FrameworkElementFactory btnUpdate = new FrameworkElementFactory(typeof(Button));
            btnUpdate.SetValue(Button.ContentProperty, "Update");
            btnUpdate.SetValue(Button.CommandParameterProperty, new Binding("CustomerID"));
            btnUpdate.AddHandler(Button.ClickEvent, new RoutedEventHandler(UpdateCustomer_Click));
            factory.AppendChild(btnUpdate);

            FrameworkElementFactory btnDelete = new FrameworkElementFactory(typeof(Button));
            btnDelete.SetValue(Button.ContentProperty, "Delete");
            btnDelete.SetValue(Button.CommandParameterProperty, new Binding("CustomerID"));
            btnDelete.AddHandler(Button.ClickEvent, new RoutedEventHandler(DeleteCustomer_Click));
            factory.AppendChild(btnDelete);

            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = factory;
            actionsColumn.CellTemplate = cellTemplate;

            dtCustomers.Columns.Add(actionsColumn);
            dtCustomers.Items.Refresh();

        }

        private void UpdateCustomer_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int customerId = (int)button?.CommandParameter;

            UpdateCustomerWindow updateWindow = new UpdateCustomerWindow(customerId);
            updateWindow.Owner = Window.GetWindow(this);
            updateWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;

            updateWindow.Closed += (s, args) =>
            {
                BindCustomers();
                dtCustomers.Items.Refresh();

            };

            updateWindow.ShowDialog();
        }

        private void DeleteCustomer_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int customerId = (int)button?.CommandParameter;

            MessageBoxResult result = MessageBox.Show($"Do you want to delete Customer ID: {customerId}?",
                                                      "Confirm Deleting",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                _customerRepository.DeleteCustomer(_customerRepository.GetCustomerById(customerId));


                MessageBox.Show("Delete complete");
                BindCustomers();
                dtCustomers.Items.Refresh();

            }
        }

            private void Add_Customer_Click(object sender, RoutedEventArgs e)
        {
            AddNewCustomer addNewCustomer = new AddNewCustomer();
            addNewCustomer.Owner = Window.GetWindow(this); // Set the owner window
            addNewCustomer.WindowStartupLocation = WindowStartupLocation.CenterOwner; // Center the window

            addNewCustomer.Closed += (s, args) =>
            {
                BindCustomers();
                dtCustomers.Items.Refresh();

            };
            addNewCustomer.ShowDialog();
        }


        private void ButtonLogOut_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
            MainWindow mainWindow = new MainWindow();
            mainWindow.Show();
        }

        private void Confirm_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int bookingReservationID = (int)button.CommandParameter;
            MessageBoxResult result = MessageBox.Show($"Do you want to confirm Booking ID: {bookingReservationID}?",
                                                      "Confirm confirm",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {

                var bookingReservation = _bookingReservationRepository.GetBookingReservation(bookingReservationID);
                bookingReservation.BookingStatus = BookingStatus.Confirmed;
                _bookingReservationRepository.UpdateReservation(bookingReservation);
                var bookingDetail = _bookingDetailRepository.GetBookingDetail(bookingReservationID);
                bookingDetail.BookingReservation = bookingReservation;
                _bookingDetailRepository.UpdateBookingDetail(bookingDetail);
                MessageBox.Show("Confirm complete");
                BindBookingDetails();
                dtBookingDetails.Items.Refresh();



            }
        }

        private void Decline_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            int bookingReservationID = (int)button.CommandParameter;
            MessageBoxResult result = MessageBox.Show($"Do you want to declined Booking ID: {bookingReservationID}?",
                                                      "Confirm Decline",
                                                      MessageBoxButton.YesNo,
                                                      MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                
                var bookingReservation = _bookingReservationRepository.GetBookingReservation(bookingReservationID);
                bookingReservation.BookingStatus = BookingStatus.Cancelled;
                _bookingReservationRepository.UpdateReservation(bookingReservation);
                var bookingDetail = _bookingDetailRepository.GetBookingDetail(bookingReservationID);
                bookingDetail.BookingReservation = bookingReservation;
                _bookingDetailRepository.UpdateBookingDetail(bookingDetail);
                MessageBox.Show("Decline complete");
                BindBookingDetails();
                dtBookingDetails.Items.Refresh();



            }
        }
    }
}

